--- -------------------------------------------
--- Cut Elimination
--- Case: One sided linear (multiplicative) cuts
--- -------------------------------------------

***(

This procedure considers one-sided sequent systems and the cut-rule is
multiplicative (splitting the context between the two premises)

)


load cut-elimination-base .
    
mod CUT-PROVING{SPEC :: CUT-SPEC} is
    ex CUT-BASE{SPEC} .
    ----------------------------
    var  M M'           : Module .
    vars Q Q'           : Qid .
    var Ans             : Trace? .
    vars gtc gtc'       : GroundTerm .
    vars gtp gtp'       : GroundTerm .
    var GTGoal          : GroundTerm .
    var  RS             : RuleSet .
    vars GTA GTB        : GroundTerm .
    var GF              : GroundTerm .
    ----------------------------


    --- Definition of the cut-rule
    eq cut-rule =
	( rl '_:_['inf.INat,  '|--_['_;_['Gamma$$:MSFormula, 'Delta$$:MSFormula]]] =>
	  '_|_['_:_['h1$$:FNat, '|--_['_;_['FCut$$:Formula, 'Gamma$$:MSFormula]]],
	    '_:_['h2$$:FNat, '|--_['_;_['dual['FCut$$:Formula], 'Delta$$:MSFormula]]]]
	  [ label('\Cut) ]. ) .


       
      --- Solving the case with the needed hypotheses
    ceq holds$?(Q, Q', cut-case(
	    M,
	    cut-sub-case(gtc, gtp),
	    cut-sub-case(gtc', gtp'),
	    GTGoal,
	    GF)) 
      = result(M', Q, Q', GTGoal, gtc, gtp, gtc', gtp', Ans)
      if
	  --- Premises
	  RS := premises(gtc) premises(gtc')
	  premises(gtp) premises(gtp')
	  --- invertibility lemmas on the premises
	  inv-premises(M, inv-rules, gtp) inv-premises(M, inv-rules,  gtp')
	  already-proved-theorems
	  --- Induction on the height of the derivation
	  induct-height(getHeight(gtc), getHeight(gtc'), GF)
	  --- Induction on the structure only in the principal cases
	  if numFormulas(GTGoal) == 0 then induct-struct(GF) else none fi
	  /\ M' := newModuleRls(M, RS) 
	  /\  Ans := metaSearchPath(M', GTGoal, upTerm(proved), nil, '*, bound-spec, 0) .


    eq induct-struct-formula(GTA) 
     = if getType(GTA) == 'Formula
        then (crl  getHead(cut-rule) =>
	  '_|_[
	    apply(pr1, ('h1$$:FNat <- 'inf.INat ; 'FCut$$:Formula <- GTA)),
	    apply(pr2, ('h2$$:FNat <- 'inf.INat ; 'FCut$$:Formula <- GTA)) ]
	if 'false.Bool = 'in[GTA, '_;_['Gamma$$:MSFormula,  'Delta$$:MSFormula]]
	  [ label('\sCut) ]. )
        else none
        fi .
endm
