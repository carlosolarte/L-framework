load ../../cut-elimination-base .
--- This procedure checks for cut-elimination for 1-sided system and
--- the cut-rule multiplicative for dyadic systems (classical + linear
--- contexts).
    
mod CUT-PROVING{SPEC :: CUT-SPEC} is
    pr CUT-BASE{SPEC} .
    ----------------------------
    var  M M'           : Module .
    vars Q Q'           : Qid .
    var Ans             : Trace? .
    vars gtc gtc'       : GroundTerm .
    vars gtp gtp'       : GroundTerm .
    var GTGoal          : GroundTerm .
    var  RS             : RuleSet .
    vars GTA GTB        : GroundTerm .
    var GF              : GroundTerm .
    vars gh gh'         : GroundTerm .
    ----------------------------
 
    eq cut-rule =
	( rl '_:_['inf.INat,  '|--<_>_['Gamma$$:MSFormula, '_;_['Delta1$$:MSFormula, 'Delta2$$:MSFormula]]] =>
	  '_|_['_:_['h1$$:FNat, '|--<_>_['Gamma$$:MSFormula,'_;_['FCut$$:Formula, 'Delta1$$:MSFormula]]],
	    '_:_['h2$$:FNat, '|--<_>_['Gamma$$:MSFormula,'_;_['dual['FCut$$:Formula], 'Delta2$$:MSFormula]]]]
	  [ label('\Cut) ]. ) .



    --- Solving the case with the needed hypotheses
    ceq holds$?(Q, Q', cut-case(
	    M,
	    cut-sub-case(gtc, gtp),
	    cut-sub-case(gtc', gtp'),
	    GTGoal,
	    GF)) 
      = result(M', Q, Q', GTGoal, gtc, gtp, gtc', gtp', Ans)
      if
	  --- Premises
	  RS := premises(gtc) premises(gtc')
	  premises(gtp) premises(gtp')
	  --- invertibility lemmas on the premises
	  inv-premises(M, inv-rules, gtp) inv-premises(M, inv-rules,  gtp')
	  already-proved-theorems
	  --- Induction on the height of the derivation
	  induct-height(getHeight(gtc), getHeight(gtc'), GF)
	  --- Induction on the structure only in the principal cases
	  if numFormulas(GTGoal) == 0 then induct-struct(GF) else none fi
          --- Mutual induction on the CC theorem 
          mutual-induct(getHeight(gtc), getHeight(gtc'), GF) 
	  /\ M' := newModuleRls(M, RS) 
	  /\  Ans := metaSearchPath(M', GTGoal, upTerm(proved), nil, '*, bound-spec, 0) .


     eq induct-struct-formula(GTA) 
     = if getType(GTA) == 'Formula
        then (crl  getHead(cut-rule) =>
	  '_|_[
	    apply(pr1, ('h1$$:FNat <- 'inf.INat ; 'FCut$$:Formula <- GTA)),
	    apply(pr2, ('h2$$:FNat <- 'inf.INat ; 'FCut$$:Formula <- GTA)) ]
	if 'false.Bool = 'in[GTA, '_;_['Gamma$$:MSFormula, '_;_['Delta1$$:MSFormula, 'Delta2$$:MSFormula]]]
	  [ label('\sCut) ]. )
        else none
        fi .

    --- In the proof of cut-elimination of the dyadic system of LL, a
    --- mutual induction on 2 cut-rules is needed. This is the
    --- definition of the cut rule for the classical context
    --- The first two parameters are the height of the cut and the third
    --- the cut-formula (needed to produce strict less terms and
    --- suitable inductive rules)
    op mutual-induct : GroundTerm GroundTerm GroundTerm -> RuleSet .  
    eq mutual-induct('suc[gh], 'suc[gh'], '?_[GTA]) =
	(rl '_:_['inf.INat,  '|--<_>_['Gamma:MSFormula, 'Delta:MSFormula]] =>
	  '_|_['_:_[gh, '|--<_>_['_;_['Gamma:MSFormula, GTA] , 'Delta:MSFormula]],
	    '_:_['suc[gh'], '|--<_>_['Gamma:MSFormula, '!_['dual[GTA]]]]]
	  [ label('\mCut) ]. )
        .

    eq mutual-induct('suc[gh], 'suc[gh'], '!_[GTA]) =
	(rl '_:_['inf.INat,  '|--<_>_['Gamma:MSFormula, 'Delta:MSFormula]] =>
	  '_|_['_:_['suc[gh], '|--<_>_['Gamma:MSFormula , '!_[GTA]]],
	    '_:_[gh', '|--<_>_['_;_['Gamma:MSFormula, 'dual[GTA]] , 'Delta:MSFormula]]]
	  [ label('\mCut) ]. )
        .
    eq mutual-induct(gh, gh', GTA) = none [owise] .


endm
eof
