--- Cyberlogic System (propositional)

load ../../sequent .

mod Cyber is
    	ex SEQUENT-SOLVING .

    --- Principals
    sort Principal .

    op KCTE : -> Principal [ctor] .

    op Pr : String -> Principal .
    
    --- Atomic Propositions
    ops p : Nat -> Prop [ctor] .

    --- Conjunction
    op _/\_ : Formula Formula -> Formula [ctor  prec 30] .
    --- Disjunction
    op _\/_ : Formula Formula -> Formula [ctor  prec 30] .
    --- Implication
    op _-->_ : Formula Formula -> Formula [ctor prec 35] .
    --- Attestation
    op _:>_ : Principal Formula -> Formula [ctor prec 32] .
    --- Knowledge

    --- Formulas marked with res
    sorts ResFormula MSResFormula .
    subsort ResFormula < Formula .
    subsort ResFormula < MSResFormula .
    subsort MSResFormula < MSFormula .
    op * : -> MSResFormula .
    op _;_ : MSResFormula MSResFormula -> MSResFormula [prec 40 ctor assoc comm id: * ] .
    op _;_ : MSFormula MSResFormula -> MSFormula [prec 40 ctor assoc comm id: * ] .

    op res__ : Principal Formula -> ResFormula [ctor prec 31] .

    --- Removing res's
    op unbox : Principal MSResFormula -> MSFormula .
    --- eq unbox(K, *) = * .
    --- eq unbox(K, (res K F ; C)) = F ; unbox(K, C) .
    --- eq unbox(K, (F ; C)) = unbox(K, C) [owise] .




    eq TEXReplacement =
	('|-- |-> '\vdash), 
        ('/\ |-> '\wedge),
        ('\/ |-> '\vee),
	('--> |-> '\iimp), 
        ('; |-> '`, ),
        (':> |-> '\rhd),
        ('res |-> 'res)
	.

    eq TEXReplacementSeq =
	('AndL   |-> '\wedge_L), 
    ('AndR   |-> '\wedge_R),
	('OrL    |-> '\vee_L), 
    ('OrR1   |-> '\vee_R),
    ('OrR2   |-> '\vee_R),
	('impL   |-> '\iimp_L), 
    ('impR   |-> '\iimp_R),
	('height |-> '\heightRule),
    ('SaysR  |-> '\rhd_R),
    ('SaysL  |-> '\rhd_L),
    ('SaysE  |-> '\rhd_e),
    ('ResR   |-> '\res_R),
    ('ResL   |-> '\res_L)
	.


    vars K K' : Principal .
    var P : Prop .
    vars F G H : Formula .
    vars C1 C2 C C' : MSFormula .
    vars CR CR' : MSResFormula .
    
    rl [I]    :  P ; C |-- P  => proved .
    rl [AndL] :  F /\ G ; C |-- H => F ; G ; C |-- H .
    rl [AndR] :  C |-- F /\ G  =>  ( C |-- F) | ( C |-- G) .
    rl [OrL]  :  C ; F \/ G |-- H => (C ; F |-- H) | (C ; G |-- H) .
    rl [OrR1] :  C |-- F \/ G =>  C |-- F .
    rl [OrR2] :  C |-- F \/ G =>  C |-- G .
    rl [impR] :  C |-- (F --> G) => C ; F |-- G .
    rl [impL] :  C ; F --> G |-- H => ( C ; F --> G  |-- F ) | ( C ; G |-- H) .
    --- Attestation rules
    rl [SaysR] : C |-- K :> F => C |-- F .
    rl [SaysL] : C ; K :> F |-- K :> G => C ; F |-- K :> G .
    --- Adding this rule breaks cut-elimination
    rl [SaysE] : C |-- K :> P => proved .
    --- Knowldge rules
    rl [ResL] : C ; res K F |-- G => C ; F |-- G .
    rl [ResR] : C ; CR |-- res K F => unbox(K, CR) |-- F .

    --- Lemma needed for cut-elimination and invertibility of SaysL: 
    --- C ; K :> F |-- G  =>  C ; F |-- G

endm

