
--- The proof of admissibility of contraction on the left and right
--- goes by mutual induction on the two rules. Also, invertibility
--- lemmas are needed. See the dependencies in the definition of
--- inv-rules and mutual-ind

--- Due to the unbox function, here we prove the general case where
--- contraction applies on set of formulas. This way, for a boxed
--- context C, unbox(C) can be duplicated to unbox(C) ; unbox(C)

--- -----------------------------------------------------------
--- Height preserving admissibility of Contraction on the Left
--- -----------------------------------------------------------

load ../../admissibility .

fmod ADMISSIBILITY-C is
    pr META-LEVEL .
    op th-name : -> String .
    eq th-name = "Height preserving admissibility of contraction on the left" .
    
    op mod-name : -> Qid .
    eq mod-name = 'S4 .

    vars GT GT' GT'' GF : GroundTerm .
    
    op rule-spec : -> Rule .
    eq rule-spec
      = ( rl '_:_['n:FNat,  '_|--_['_;_['Gamma:MSFormula, 'DF:MSFormula], 'Delta:MSFormula]] =>
	  '_:_['n:FNat, '_|--_['_;_['Gamma:MSFormula, '_;_['DF:MSFormula, 'DF:MSFormula]] ,'Delta:MSFormula]]
	  [ label('H) ]. ) .

    op bound-spec : -> Nat .
    eq bound-spec = 10 .

    op file-name : -> String .
    eq file-name = "contractionL.tex" .

    --- The cases implL, conjL, disjL and topL fail. Invertibility
    --- lemmas are needed
    op inv-rules : -> QidList .
    eq inv-rules = 'topL 'OrL 'AndL 'impL .

    --- In the case of impL, mutual induction on contraction on the
    --- right is needed
    op mutual-ind : GroundTerm -> RuleSet .
    eq mutual-ind('suc[GT])
      = ( rl '_:_[GT,  '_|--_['Gamma:MSFormula, '_;_['DF:MSFormula, 'Delta:MSFormula]]] =>
	  '_:_[GT,  '_|--_['Gamma:MSFormula, '_;_['_;_['DF:MSFormula, 'DF:MSFormula], 'Delta:MSFormula]]]
	  [ label('\IHMutual) ]. ) .
    eq mutual-ind(GT) = none [owise] .

    --- No previous theorems needed
    op already-proved-theorems : -> RuleSet .
    eq already-proved-theorems = none .

    
endfm

view Admissibility-C from ADMISSIBILITY-SPEC to ADMISSIBILITY-C is endv    

mod PROVE-C is pr  ADMISSIBILITY-THEOREM{Admissibility-C} . endm

--- -----------------------------------------------------------
--- Height preserving admissibility of Contraction on the Right
--- -----------------------------------------------------------

fmod ADMISSIBILITY-CR is
    pr META-LEVEL .
    op th-name : -> String .
    eq th-name = "Height preserving admissibility of contraction on the Right" .
    
    op mod-name : -> Qid .
    eq mod-name = 'S4 .

    vars GT GT' GT'' GF : GroundTerm .
    
    op rule-spec : -> Rule .
    eq rule-spec
      = ( rl '_:_['n:FNat,  '_|--_['Delta:MSFormula, '_;_['Gamma:MSFormula, 'CF:MSFormula]]] =>
	  '_:_['n:FNat,  '_|--_['Delta:MSFormula, '_;_['Gamma:MSFormula, '_;_['CF:MSFormula, 'CF:MSFormula]]]]
	  [ label('H) ]. ) .

    op bound-spec : -> Nat .
    eq bound-spec = 10 .

    op file-name : -> String .
    eq file-name = "contractionR.tex" .

    --- The cases implR, conjR, disjR and botR fail. Invertibility
    --- lemmas are needed
    op inv-rules : -> QidList .
    eq inv-rules = 'botR 'OrR  'AndR 'impR .

    --- In the case of impR, mutual induction on contraction on the
    --- right is needed
    op mutual-ind : GroundTerm -> RuleSet .
    eq mutual-ind('suc[GT])
      = ( rl '_:_[GT,  '_|--_['_;_['Gamma:MSFormula, 'CF:MSFormula], 'Delta:MSFormula]] =>
	  '_:_[GT, '_|--_['_;_['Gamma:MSFormula, '_;_['CF:MSFormula, 'CF:MSFormula]],'Delta:MSFormula]]
	  [ label('\IHMutual) ]. ).
    eq mutual-ind(GT) = none [owise] .

    --- No previous theorems needed
    op already-proved-theorems : -> RuleSet .
    eq already-proved-theorems = none .

    
endfm

view Admissibility-CR from ADMISSIBILITY-SPEC to ADMISSIBILITY-CR is endv    

mod PROVE-CR is pr  ADMISSIBILITY-THEOREM{Admissibility-CR} . endm
