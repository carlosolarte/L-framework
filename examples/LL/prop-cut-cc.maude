--- Cut Elimination theorem
--- The additive cut (sharing the context) is used here where
--- weakening is embedded in the procedure (and hence, those rules do
--- not need to be added explicitly as already-proved-theorems)
load cut-ll-cc .

mod CUT-LL-CC is
    pr META-LEVEL .
    pr LL .
    op mod-name : -> Qid .
    eq mod-name = 'LL .
    --- Bound of the search procedure
    op bound-spec : -> Nat .
    eq bound-spec = 8 .

    --- We assume the theorem on heights
    op already-proved-theorems : -> RuleSet .
    eq already-proved-theorems =
	( rl '_:_['suc['n:FNat],  '|--_['Gamma:MSFormula]] => 
          '_:_['n:FNat, '|--_['Gamma:MSFormula]]
          [ label('height) ]. )
	( rl '_:_['inf:INat,  '|--_['_;_['G:Formula, 'Delta:MSFormula]]] =>
	  '_:_['inf:INat, '|--_['_;_['!_['G:Formula], 'Delta:MSFormula ]]]
	  [ label('bInv) ]. ) 
         ( crl '_:_['inf.INat,  '|--_['_;_['Gamma:MSFormula, 'Delta:?MSFormula]]] => 
             '_:_['inf.INat,  '|--_['_;_['Gamma:MSFormula, '_;_['Delta:?MSFormula, 'Delta:?MSFormula]]]]
             if 'false.Bool = 'isEmpty['Delta:?MSFormula] /\
             'false.Bool = 'duplicated?['Delta:?MSFormula]  /\
             'false.Bool = 'containsQuest['Gamma:MSFormula] 
             [ label('C) ]. )
 
        .
    --- File name to write the output
    op file-name : -> String .
    eq file-name = "cutcc.tex" .

    --- No invertible lemmas are needed
    op inv-rules : -> QidList .
    eq inv-rules = nil .

    --- No mutual induction
    op mutual-ind : GroundTerm -> RuleSet .
    eq mutual-ind(GT:GroundTerm) = none .

endm
    
view Cut-LL-CC from CUT-SPEC to CUT-LL-CC is endv    

mod PROVE-CUT-CC is pr CUT-PROVING{Cut-LL-CC} . endm
