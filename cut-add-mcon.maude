--- -----------------------------------------------------
--- Cut Elimination
--- Case: Additive, two sided, multiple conclusion systems
--- -----------------------------------------------------
    
***( 

This procedure aims at proving  the cut-elimination theorem for 2-sided, single
conclusion systems. The cut-rule is additive (sharing the contexts among the
premises). Weakening is certainly needed to finish some of the cases.
)


load cut-elimination-base .    
    
mod CUT-PROVING{SPEC :: CUT-SPEC} is
	ex CUT-BASE{SPEC} .

    ----------------------------
    var  M M'           : Module .
    vars Q Q'           : Qid .
    var Ans             : Trace? .
    vars gtc gtc'       : GroundTerm .
    vars gtp gtp'       : GroundTerm .
    var GTGoal          : GroundTerm .
    var  RS             : RuleSet .
    vars GTA GTB        : GroundTerm .
    var GF              : GroundTerm .
    ----------------------------

    --- -------------------------
    --- Definition of the cut rule
    --- -------------------------

    eq cut-rule =                  
	( rl '_:_['inf.INat,  '_|--_['Gamma$$:MSFormula, 'Delta$$:MSFormula]] =>
	  '_|_[                    
	    '_:_['h1$$:FNat, '_|--_['Gamma$$:MSFormula, '_;_['Delta$$:MSFormula, 'FCut$$:Formula]]],
	    '_:_['h2$$:FNat, '_|--_['_;_['Gamma$$:MSFormula, 'FCut$$:Formula] ,'Delta$$:MSFormula]]]
	  [ label('\Cut) ]. ) .    

      
      --- Solving the case with the needed hypotheses
    ceq holds$?(Q, Q', cut-case(
	    M,
	    cut-sub-case(gtc, gtp),
	    cut-sub-case(gtc', gtp'),
	    GTGoal,
	    GF)) 
      = result(M', Q, Q', GTGoal, gtc, gtp, gtc', gtp', Ans)
      if
	  --- Premises with implicit weakening
	  RS := premises-W(gtc) premises-W(gtc')
	  premises-W(gtp) premises-W(gtp')
	  --- invertibility lemmas on the premises
	  inv-premises(M, inv-rules, gtp) inv-premises(M, inv-rules,  gtp')
	  already-proved-theorems
	  --- Induction on the height of the derivation
	  induct-height(getHeight(gtc), getHeight(gtc'), GF)
	  --- Induction on the structure only in the principal cases
	  if numFormulas(GTGoal) <= 2 then induct-struct(GF) else none fi
	  /\ M' := newModuleRls(M, RS) 
	  /\  Ans := metaSearchPath(M', GTGoal, upTerm(proved), nil, '*, bound-spec, 0) .

    eq induct-struct-formula(GTA)
      = 
        if getType(GTA) == 'Formula
        then ( crl  getHead(cut-rule) =>
	  '_|_[
	    apply(pr1, ('h1$$:FNat <- 'inf.INat ; 'FCut$$:Formula <- GTA)),
	    apply(pr2, ('h2$$:FNat <- 'inf.INat ; 'FCut$$:Formula <- GTA)) ]
	if 'false.Bool = 'in[GTA, '_;_['Gamma$$:MSFormula,  'Delta$$:MSFormula]]
	  [ label('\sCut) ]. )
        else none
        fi 
	.
endm
